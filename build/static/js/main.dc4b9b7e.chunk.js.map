{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/aStar.js","algorithms/bfs.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this$props","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","React","createElement","id","concat","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","_step","nodes","_iterator","_createForOfIteratorHelper","s","n","done","_step2","_iterator2","node","push","err","e","f","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","_step3","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","_iterator3","previousNode","AStar","sortByDistance","distanceToFinishNode","PathfindingVisualizer","_this","call","getInitialGrid","rowCount","undefined","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","_assertThisInitialized","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","_step4","_iterator4","_step5","_iterator5","_step6","_iterator6","algo","nextNodesStack","currentNode","bfs","pop","nextNode","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","_this2","_loop","i","setTimeout","animateShortestPath","v","_ret","_this3","_loop2","_this4","_this$state","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","visualize","toggleView","onMouseLeave","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","newNode","_objectSpread","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc4b9b7e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if(neighbor.isWall) continue;\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function AStar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if(neighbor.isWall) continue;\r\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const {col, row} = currentNode;\r\n      const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\r\n      for (const neighbor of unvisitedNeighbors) {\r\n        if(neighbor.isWall) continue;\r\n        neighbor.distance = currentNode.distance + 1;\r\n        nextNodesStack.push(neighbor);\r\n        neighbor.previousNode = currentNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 0,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 0,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      // to be used in dijkstra, bfs and dfs  \r\n      distance: Infinity,\r\n      // to be used in A star\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <b>PathFinding Visualizer</b>\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  href=\"https://github.com/siddhant-dutta/PathFindingVisualizer\">\r\n                  {' '}\r\n                  PathFinder Visualizer code{' '}\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"https://prudhvignv.github.io\">\r\n                  Check Out Other Cool Projects\r\n                </a>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Dijkstra's\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('AStar')}>\r\n          A*\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('BFS')}>\r\n          Bread First Search\r\n        </button>\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('DFS')}>\r\n          Depth First Search\r\n        </button> */}\r\n        {this.state.isDesktopView ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n            onClick={() => this.toggleView()}>\r\n            Mobile View\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark\"\r\n            onClick={() => this.toggleView()}>\r\n            Desktop View\r\n          </button>\r\n        )}\r\n\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nextNodesStack = [];\r\n  nextNodesStack.push(startNode);\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.pop();\r\n\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}